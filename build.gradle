apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.16'
	compile 'com.h2database:h2:1.4.195'
    providedCompile 'com.fasterxml.jackson.core:jackson-databind:2.8.5'
	providedCompile 'javax:javaee-web-api:7.0'
	providedRuntime 'fish.payara.extras:payara-microprofile:1.0-4.1.2.172'
    testCompile 'junit:junit:4.10'
}

war {
	archiveName = 'ROOT.war'
}
task h2sql(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    main = 'org.h2.tools.Shell'
    args = ["-url", "jdbc:h2:~/h2db/test"]
}
task initdb(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    main = 'org.h2.tools.RunScript'
    args = ["-url", "jdbc:h2:~/h2db/test", "-script", "initdb.sql"]

}
task payara(type: Exec, dependsOn: war) {
    description "Run payara-microprofile server with this project's war file."

    def payaraJarPath = configurations
                        .providedRuntime
                        .find {it.name =~ /payara-micro.*\.jar/}
                        .absolutePath

    def warFile = war.archivePath
    commandLine('java', '-jar', payaraJarPath, '--deploy', warFile)
}
task payaraDebug(type: Exec, dependsOn: war) {
    def payaraJarPath = configurations
                        .providedRuntime
                        .find {it.name =~ /payara-micro.*\.jar/}
                        .absolutePath

    def warFile = war.archivePath
    commandLine('java', '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005', '-jar', payaraJarPath, '--deploy', warFile)
}
task uberJar(type: Exec, dependsOn: war){
    description "Create runnable jar file."

    def payaraJarPath = configurations
                        .providedRuntime
                        .find {it.name =~ /payara-micro.*\.jar/}
                        .absolutePath
    def warFile = war.archivePath
    def outputPath = project.distsDir.absolutePath + "/app.jar"
    
    doFirst{
        if (!project.distsDir.exists()) {
            project.distsDir.mkdir()
        }
    }

    commandLine('java', '-jar', payaraJarPath, '--deploy', warFile, '--outputUberJar', distsDir.path + "/app.jar")
}

